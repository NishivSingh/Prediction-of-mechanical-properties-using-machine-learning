# -*- coding: utf-8 -*-
"""Design Credit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vupYGIfS5j8MDTyUFcuK343BC4WZSk9a
"""

import pandas as pd


df = pd.read_csv("/content/MatNavi Mechanical properties of low-alloy steels.csv");

df.head()

X = df.iloc[:,1:16];
y = df.iloc[:,16:]

X.head()

y.head()

from sklearn.model_selection import train_test_split
X_new,X_test,y_new,y_test = train_test_split(X,y,test_size=0.1,random_state=2);
X_train,X_valid,y_train,y_valid = train_test_split(X_new,y_new,test_size=2/9,random_state=2)

[X_train.shape,y_train.shape],[X_valid.shape,y_valid.shape],[X_test.shape,y_test.shape]

import warnings
warnings.filterwarnings('ignore')

# Modeling Libraries
from sklearn.multioutput import MultiOutputRegressor
from sklearn.linear_model import LinearRegression, LogisticRegression, RidgeCV, SGDRegressor,MultiTaskLasso,MultiTaskElasticNet
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

def model_results(XTrain,XValid,yTrain,yValid):
  models =[('Linear', LinearRegression()),
           ('Logistic', MultiOutputRegressor(LogisticRegression())),
           ('Random Forest',RandomForestRegressor()),
           ('KNN', KNeighborsRegressor(n_neighbors=10)),
           ('MultiTaskLasso', MultiTaskLasso(alpha=0.1)),
           ('MultiTaskElasticNet',MultiTaskElasticNet()),
           ('Support Vector',MultiOutputRegressor(SVR())),
           ('Decision Tree',MultiOutputRegressor(DecisionTreeRegressor())),
           ('AdaBoost',MultiOutputRegressor(AdaBoostRegressor())),
           ('GradientBoost',MultiOutputRegressor(GradientBoostingRegressor()))
          ]
  finalResults = []

  for name,model in models:
      model.fit(XTrain, yTrain)
      model_results = model.predict(XValid)
      r2score = r2_score(yValid, model_results) 
      RMSE = mean_squared_error(yValid, model_results,squared = False)
      MAE = mean_absolute_error(yValid, model_results)
      finalResults.append((name, r2score, RMSE, MAE))
  finalResults.sort(key=lambda k:k[2])
  return finalResults

results = pd.DataFrame(model_results(X_train,X_valid,y_train,y_valid),columns=['Model Name', 'R2 Score', 'RMSE', 'MAE'])
results